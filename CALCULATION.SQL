
CREATE DATABASE CALCULATIONS;
GO


USE CALCULATIONS;
GO


CREATE TABLE BOOKSS (
    BOOK_ID INT PRIMARY KEY,
    TITLE VARCHAR(100)
);
GO


CREATE TABLE SALES (
    SALE_ID INT PRIMARY KEY IDENTITY(1,1),
    BOOK_ID INT,
    SALE_DATE DATE,
    SALE_AMOUNT DECIMAL(10,2),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOKSS(BOOK_ID)
);
GO


INSERT INTO BOOKSS VALUES
(1, 'SQL Guide'),
(2, 'Learn Python'),
(3, 'Data Science 101'),
(4, 'Machine Learning');
GO


INSERT INTO SALES (BOOK_ID, SALE_DATE, SALE_AMOUNT) VALUES
(1, '2024-01-10', 500),
(2, '2024-02-15', 700),
(1, '2024-03-05', 800),
(3, '2024-01-20', 900),
(2, '2024-02-20', 600),
(4, '2024-03-10', 1000);
GO


CREATE PROCEDURE GetSalesReport
AS
BEGIN
   
    SELECT TITLE, SUM(SALE_AMOUNT) AS TOTALSALES
    FROM BOOKSS
    JOIN SALES ON BOOKSS.BOOK_ID = SALES.BOOK_ID
    GROUP BY TITLE;

    SELECT TITLE, YEAR(SALE_DATE) AS SALE_YEAR, SUM(SALE_AMOUNT) AS TOTAL
    FROM BOOKSS
    JOIN SALES ON BOOKSS.BOOK_ID = SALES.BOOK_ID
    GROUP BY TITLE, YEAR(SALE_DATE);

    SELECT TITLE, SUM(SALE_AMOUNT) AS TOTALSALES
    FROM BOOKSS
    JOIN SALES ON BOOKSS.BOOK_ID = SALES.BOOK_ID
    GROUP BY TITLE
    HAVING SUM(SALE_AMOUNT) > 1000;
END;
GO

CREATE PROCEDURE GetBookSalesByTitle
    @Title VARCHAR(100)
AS
BEGIN
    SELECT TITLE, SUM(SALE_AMOUNT) AS TOTALSALES
    FROM BOOKSS
    JOIN SALES ON BOOKSS.BOOK_ID = SALES.BOOK_ID
    WHERE TITLE = @Title
    GROUP BY TITLE;
END;
GO


CREATE FUNCTION GetAverageSale()
RETURNS DECIMAL(10,2)
AS
BEGIN
    DECLARE @Average DECIMAL(10,2);
    SELECT @Average = AVG(SALE_AMOUNT) FROM SALES;
    RETURN @Average;
END;
GO

EXEC GetSalesReport;
EXEC GetBookSalesByTitle 'SQL Guide';
SELECT dbo.GetAverageSale() AS AverageSale;
GO
